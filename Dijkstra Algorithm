//Implementation of Dijkstra algorithm using set.
//And also for the storing tha sortest path of a given node.
//NOTE: These code are designed for node starting from 0.
#include <bits/stdc++.h>
using namespace std;
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define int long long
const int N = 1e5 + 5;
const int INF=1000000000;
vector<pair<int,int>>adj[N];
int n;
void dijkstra(int s,vector<int>&d,vector<int>&p){
    d.assign(N,INF);
    p.assign(N,-1);
    set<pair<int,int>> q;
    q.insert({0,s});
    d[s]=0;
    while(!q.empty()){
        int v=q.begin()->second;
        q.erase(q.begin());
        for (auto edge:adj[v]){
            int to=edge.first;
            int len=edge.second;
            if(d[v]+len<d[to]){
                q.erase({d[to],to});//deleting the previous node as the 
                                   //the node is updated now.
                d[to]=d[v]+len;
                p[to]=v;
                q.insert({d[to],to});//Inserting the updated vertion of this
                                  // node.
            }
        }
    }
}
vector<int> restore_path(int s,int t,vector<int>&p){
    vector<int>path;
    for(int v=t;v!=s;v=p[v])
          path.push_back(v);
    path.push_back(s);
    reverse(path.begin(),path.end());
    return path;
}
int32_t main()
{
	IOS;
	cin>>n;int m;cin>>m;
	for(int i=0;i<m;i++){
	    int u,v,wt;
	    cin>>u>>v>>wt;
	    adj[u].push_back({v,wt});
	}
	vector<int>d,p;
	dijkstra(0,d,p);
	for(int i=0;i<n;i++)cout<<d[i]<<" ";
	cout<<endl;
	vector<int>path=restore_path(0,5,p);
	for(int i=0;i<path.size();i++)cout<<path[i]<<" ";
	cout<<endl;
	return 0;
}

//Implementation of Dijkstra algorithm using prority queue.
//And also for the storing tha sortest path of a given node.
//Using priority_queue the Dijkstra algorithm is little bit faster.
//NOTE: These code are designed for node starting from 0.
#include <bits/stdc++.h>
using namespace std;
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define int long long
const int N = 1e5 + 5;
const int INF=1000000000;
vector<pair<int,int>>adj[N];
int n;
void dijkstra(int s,vector<int>&d,vector<int>&p){
    d.assign(N,INF);
    p.assign(N,-1);
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> q;
    q.push({0,s});
    d[s]=0;
    while(!q.empty()){
        int v=q.top().second;
        int d_v=q.top().first;
        q.pop();
        if(d_v!=d[v])
               continue;
        for (auto edge:adj[v]){
            int to=edge.first;
            int len=edge.second;
            if(d[v]+len<d[to]){
                
                d[to]=d[v]+len;
                p[to]=v;
                q.push({d[to],to});
            }
        }
    }
}
vector<int> restore_path(int s,int t,vector<int>&p){
    vector<int>path;
    for(int v=t;v!=s;v=p[v])
          path.push_back(v);
    path.push_back(s);
    reverse(path.begin(),path.end());
    return path;
}
int32_t main()
{
	IOS;
	cin>>n;int m;cin>>m;
	for(int i=0;i<m;i++){
	    int u,v,wt;
	    cin>>u>>v>>wt;
	    adj[u].push_back({v,wt});
	}
	vector<int>d,p;
	dijkstra(0,d,p);
	for(int i=0;i<n;i++)cout<<d[i]<<" ";
	cout<<endl;
	vector<int>path=restore_path(0,5,p);
	for(int i=0;i<path.size();i++)cout<<path[i]<<" ";
	cout<<endl;
	return 0;
}

